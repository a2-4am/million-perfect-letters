;
; convenience functions for playing sounds through different libraries
;
; Public functions:
; - InitSound
; - ReinitSoundAfterPrefChange
; - LoopSound
; - PlaySound
; - PlaySoundToCompletion
; - InitPuzzleSound
; - PlayNextChord
; - PlayFinalChord
; - ErrorSound
;
; Public variables:
; - gSoundPref
;

gSoundPref
         !byte 1                     ; 0 = no sound, 1 = sound

mockingboardSlot                     ; [byte][private]
         !byte 0                     ; 0 = no Mockingboard, 0xC1..0xC7 = slot number

progressionIndex                     ; [byte][private]
         !byte 0

kProgressionsByWorld                 ; chord progression to use on each world (index=world)
         !word k251Progression
         !word k251Progression
         !word k251Progression
         !word k251Progression
         !word k6251Progression
         !word k6251Progression
         !word k6251Progression
         !word k6251Progression
         !word k16251Progression
         !word k16251Progression
         !word k16251Progression
         !word k16251Progression
k251Progression
         !byte 2
         !word M_ii
         !word M_V
k6251Progression
         !byte 3
         !word M_vi6
         !word M_ii
         !word M_V
k16251Progression
         !byte 4
         !word M_I
         !word M_vi6
         !word M_ii
         !word M_V
kFinalChord
         !word M_I_LONG
kErrorSound
         !word M_ERROR

;------------------------------------------------------------------------------
; ReinitSoundAfterPrefChange
; reinitialize self-modified code that relies on preference values
;
; in:    none
; out:   all flags & registers clobbered
;------------------------------------------------------------------------------
ReinitSoundAfterPrefChange
         ldx   mockingboardSlot
         ; /!\ execution falls through to InitSound

;------------------------------------------------------------------------------
; InitSound
; initialize self-modified code for playing music and sound
;
; in:    X = Mockingboard slot, or 0 if no Mockingboard present
; out:   all flags & registers clobbered
;------------------------------------------------------------------------------
InitSound
         stx   mockingboardSlot
         lda   gSoundPref
         beq   @theSoundOfSilence
         cpx   #0
         beq   @playThroughSpeaker
         +LDADDR MockingDuet
         bne   +                     ; always branches
@playThroughSpeaker
         +LDADDR ElectricDuet
         bne   +                     ; always branches
@theSoundOfSilence
         +LDADDR Silence
+
         +ST16 SoundLibraryDispatch
         rts

-
         +LD16 $FE
         ; /!\ execution falls through to LoopSound

;------------------------------------------------------------------------------
; LoopSound
; play sound data repeatedly until keypress
;
; in:    A/Y points to buffer containing sound data in Electric Duet format
; out:   A = key pressed
;        all other flags & registers clobbered
;------------------------------------------------------------------------------
LoopSound
         sec
         +HIDE_NEXT_BYTE
         ; /!\ execution falls through to PlaySound

;------------------------------------------------------------------------------
; PlaySound
; play sound data once, or until keypress, whichever comes first
;
; in:    A/Y points to buffer containing sound data in Electric Duet format
; out:   N = 1 if exited because key was pressed, and A = key pressed
;        N = 0 if exited because all sound data was played
;        all other flags & registers clobbered
;------------------------------------------------------------------------------
PlaySound
         clc
         php
         +ST16 $1E
         +ST16 $FE
SoundLibraryDispatch=*+1
         jsr   $FDFD                 ; SMC
         plp
         bcc   +
         lda   KBD
         bpl   -
+        lda   KBD
Silence  rts

;------------------------------------------------------------------------------
; PlaySoundToCompletion
; play sound data once, ignoring keypresses
;
; in:    A/Y points to buffer containing sound data in Electric Duet format
; out:   all flags & registers clobbered
;------------------------------------------------------------------------------
PlaySoundToCompletion
         pha
         lda   ED0974+1
         sta   @restoreED
         lda   MBKEYBRANCH+1
         sta   @restoreMB
         lda   #0                    ; just self-modify sound routines to branch
         sta   ED0974+1              ; to next instruction on keypress, because
         sta   MBKEYBRANCH+1         ; cycle counts are critical
         pla
         jsr   PlaySound
@restoreED=*+1
         lda   #$FD                  ; SMC
         sta   ED0974+1              ; restore sound routines
@restoreMB=*+1
         lda   #$FD                  ; SMC
         sta   MBKEYBRANCH+1
         rts

;------------------------------------------------------------------------------
; InitPuzzleSound
; initialize chord progression at the start of a new puzzle
;
; in:    none
; out:   A clobbered
;        N = 1
;        Z = 0
;        all other flags & registers preserved
;------------------------------------------------------------------------------
InitPuzzleSound
         lda   #$FF
         sta   progressionIndex
         rts

;------------------------------------------------------------------------------
; PlayNextChord
; play next chord progression during a puzzle
;
; in:    none
; out:   A, Y clobbered
;        X preserved
;        flags clobbered
;------------------------------------------------------------------------------
PlayNextChord
         txa
         pha
         lda   gWorldID
         asl
         tax
         lda   kProgressionsByWorld, x
         sta   $FE
         inx
         lda   kProgressionsByWorld, x
         sta   $FF
         inc   progressionIndex
         ldy   #0
         lda   ($FE), y
         cmp   progressionIndex
         bne   +
         dec   progressionIndex
+        lda   progressionIndex
         asl
         tay
         iny
         lda   ($FE), y
         pha
         iny
         lda   ($FE), y
         tay
         pla
         jsr   PlaySoundToCompletion
         pla
         tax
         rts

;------------------------------------------------------------------------------
; PlayFinalChord
; play final chord progression when completing a puzzle
;
; in:    none
; out:   A, Y clobbered
;        X preserved
;        flags clobbered
;------------------------------------------------------------------------------
PlayFinalChord
         txa
         pha
         +LD16 kFinalChord
         jsr   PlaySoundToCompletion
         pla
         tax
         rts

;------------------------------------------------------------------------------
; PlayErrorChord
; play error sound when attempting an illegal move
;
; in:    none
; out:   A, Y clobbered
;        X preserved
;        flags clobbered
;------------------------------------------------------------------------------
PlayErrorSound
         +LD16 kErrorSound
         jmp   PlaySoundToCompletion
