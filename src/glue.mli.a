;license:MIT
;(c) 2020 by 4am
;
; ProDOS MLI wrapper (6502 compatible)
;

; ProDOS constants (these are memory addresses)
PRODOSMLI =    $BF00                 ; [callable] MLI entry point
DEVNUM =       $BF30                 ; last accessed device

; MLI parameter counts + command codes (these are not memory addresses)
CMD_QUIT = $0465                     ; quit to ProDOS
CMD_CREATE =   $07C0                 ; create new file
CMD_DESTROY =  $01C1                 ; delete a file
CMD_GETFILEINFO = $0AC4              ; get file (or volume) info
CMD_ONLINE =   $02C5                 ; check online volume(s)
CMD_SETPREFIX = $01C6                ; change current directory
CMD_GETPREFIX = $01C7                ; get current directory
CMD_OPEN =     $03C8                 ; open a file
CMD_NEWLINE =  $03C9                 ; set line-by-line read mode
CMD_READ =     $04CA                 ; read an open file
CMD_WRITE =    $04CB                 ; write to an open file
CMD_CLOSE =    $01CC                 ; close an open file
CMD_SETMARK =  $02CE                 ; change position in an open file
CMD_SETEOF  =  $02D0                 ; set file size

;------------------------------------------------------------------------------
; OpenFile
; open file via ProDOS MLI
;
; in:  A/Y address of pathname
; out: if C set, open failed and A contains error code
;      if C clear, open succeeded and A contains file reference number
;------------------------------------------------------------------------------
OpenFile
         +ST16 mliparam+1
         +LDADDR PRODOSFILEBUFFER
         +ST16 mliparam+3
         +LDADDR CMD_OPEN
         jsr   mli
         bcs   +
         lda   refnum                ; caller should save file reference number
                                     ; as this memory location may be
                                     ; overwritten by later MLI calls
+        rts

;------------------------------------------------------------------------------
; ReadFile
; read an open file via ProDOS MLI
;
; in:  stack contains 5 bytes of parameters:
;      +1 [byte] ProDOS file reference number
;      +2 [word] address of data buffer (to receive file contents)
;      +4 [word] maximum length of data to read
; out: if C set, read failed and A contains error code
;      if C clear, read succeeded and A contains the same
;        file reference number that was passed in
;------------------------------------------------------------------------------
ReadFile
         +PARAMS_ON_STACK 5
         ldy   #1
         lda   (PARAM), y
         sta   mliparam+1            ; store file reference number
         +LDPARAMPTR 2, mliparam+2   ; store address of data buffer
         +LDPARAMPTR 4, mliparam+4   ; store data length
         +LDADDR CMD_READ
         jsr   mli
         bcs   +
         lda   mliparam+1            ; if no error, return file reference number
+        rts

;------------------------------------------------------------------------------
; CloseFile
; close an open file
; in:  A = file reference number
; out: if error, C set and A contains error code
;      if success, C clear
;------------------------------------------------------------------------------
CloseFile
         sta   mliparam+1            ; store file reference number
         +LDADDR CMD_CLOSE
         bne   mli                   ; always branches

;------------------------------------------------------------------------------
; Quit
; quit to ProDOS
; in:  none
; out: does not return
;------------------------------------------------------------------------------
Quit
         +LDADDR CMD_QUIT
         ; /!\ execution falls through here
;------------------------------------------------------------------------------
; mli
; low-level MLI wrapper
;
; in:  A = MLI command code
;      Y = number of MLI parameters
;      caller has filled mliparam with all relevant parameters
; out: returns immediately after calling MLI, so whatever state
;      the MLI routine sets, the caller will see it verbatim
;------------------------------------------------------------------------------
mli      sta   mlicmd     ; store command code
         sty   mliparam   ; number of parameters
         jsr   PRODOSMLI  ; call ProDOS
mlicmd   !byte 00         ; command number
         !word mliparam   ; address of parameter table
         rts
mliparam !byte $FE,$FE,$FE,$FE
filetype !byte $FE        ; file type (set by MLI get_file_info)
auxtype                   ; auxiliary file type (2 bytes, set by MLI get_file_info)
refnum   !byte $FE        ; file refnum (set by MLI open)
mlilen   !byte $FE,$FE    ; file length (set by MLI read)
blocks   !byte $FE,$FE    ; blocks used (set by getvolumeinfo)
                          ; member is also used by createfile
         !byte $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
                          ; used by get_file_info
